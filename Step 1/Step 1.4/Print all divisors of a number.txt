#include <bits/stdc++.h>
#define mod 100000007
using namespace std;

vector<int> printDivisiors(int n)
{
  vector<int> result;
  // checking till sqrt(n)
  for (int i = 1; i <= sqrt(n); i++)
  {
    // if i divides n, then it means it is a divisor of n
    if (n % i == 0)
    {
      result.push_back(i);
      // if it is a perfect square root, don't consider it
      // twice, that's why this condition exists
      if (i != (n / i))
      {
        result.push_back(n / i);
      }
    }
  }
  // all the divisors are in unsorted order, that is why
  // we are sorting it before returning
  sort(result.begin(), result.end());
  return result;
}

int main()
{
  /*
  Ques Link:
  Print all divisors of a number
  */

  /*
  *Methods and Reference Questions

  ?METHOD 1

  if a=bq+r, if b divides a completely then q will also divide
  a completely, we will use this property for the optimization
  for printing all divisiors. first we will check for i after
  that we will check for n/i.

   if (n % i == 0)
    {
      result.push_back(i);
      if (i != (n / i))
      {
        result.push_back(n / i);
      }
    }

  Its time complexity is O(sqrt(n))

  ?METHOD 2

  in this method we will check for every number till we reach n
  for(int i=0;i<=n;i++)
  if (n % i == 0)
    {
      result.push_back(i);
    }

  Its time complexity is O(n)

  Reference Ques:
  */

  // Remove the whole #ifndef part before submitting
#ifndef ONLINE_JUDGE

  // For getting input from input.txt file
  freopen("input.txt", "r", stdin);
  // Printing the Output to output.txt file
  freopen("output.txt", "w", stdout);

#endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  // inputs
  int n;
  cin >> n;
  // result will store all the number of divisors
  vector<int> result = printDivisiors(n);
  for (int res : result)
  {
    cout << res << " ";
  }

  return 0;
}