#include <bits/stdc++.h>
#define mod 100000007
using namespace std;

int maxProfit(vector<int> &prices)
{
  // initializing min_value with starting element and max_profit with 0
  int min_value = prices[0], max_profit = 0;
  for (int i = 1; i < prices.size(); i++)
  {
    // if the element is smaller than min_value, then we will update
    // min_value with the minimum of both values
    if (min_value - prices[i] > 0)
    {
      min_value = min(min_value, prices[i]);
    }
    // if element is greater than min_value, then we can sell it for profit
    // so we will take maximum of max_profit and calculated profit for that index
    else if (min_value - prices[i] < 0)
    {
      max_profit = max(max_profit, prices[i] - min_value);
    }
  }
  // In the end we will return max_profit
  return max_profit;
}

int main()
{
  /*
   Best Time to Buy and Sell Stock
   https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
  */

  // Remove the whole #ifndef part before submitting

#ifndef ONLINE_JUDGE

  // For getting input from input.txt file
  freopen("input.txt", "r", stdin);
  // Printing the Output to output.txt file
  freopen("output.txt", "w", stdout);
#endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  /*

  ?METHOD 1

  here we will initialize two variables min_value and max_profit.
  min_value will hold the min_value prior to ith index
  max_profit will hold the max profit generated by selling the stocks.

  we will initialize the min_value with nums[0], and start the loop from 1st index
  if min_value-prices[i]>0, that means the element at prices[i] is smaller than
  min_value so we will take the min of both
    min_value = min(min_value,prices[i])

  if min_value-prices[i]<0, that means item will be sold at profit
  so we will calculate the profit and take the maximum of previous
  max_profit and calculated max_profit.
    max_profit=max(max_profit,prices[i]-min_value)

  In the end we will return the max_profit.


  ?METHOD 2


  Reference Ques:
  */

  // inputs
  int n;
  cin >> n;
  vector<int> prices(n);
  for (int i = 0; i < n; i++)
  {
    cin >> prices[i];
  }
  int res = maxProfit(prices);
  cout << res;

  return 0;
}