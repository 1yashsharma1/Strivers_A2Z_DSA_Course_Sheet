#include <bits/stdc++.h>
#define mod 100000007
using namespace std;

int maxSubArray(vector<int> &nums)
{
  // max_till_here will store the sum of subarray we are traversing
  // max will store the overall maximum subarray sum, it is initialized
  // with INT_MIN to handle all -ve elements array
  int max_till_here = 0, max = INT_MIN;
  for (int i = 0; i < nums.size(); i++)
  {
    // storing the sum of subarray in max_till_here
    max_till_here = max_till_here + nums[i];
    // if max_till_here becomes greater than overall maximum subarray sum
    // then we will update max
    if (max < max_till_here)
      max = max_till_here;
    // if max_till_here goes less than 0, then we will initialize it with 0
    if (max_till_here < 0)
      max_till_here = 0;
  }
  // at the end the max will have the maximum subarray sum
  return max;
}

int main()
{
  /*
   Maximum subarray sum/largest contiguous subarray sum/ kadane's algorithm
  */

  // Remove the whole #ifndef part before submitting

#ifndef ONLINE_JUDGE

  // For getting input from input.txt file
  freopen("input.txt", "r", stdin);
  // Printing the Output to output.txt file
  freopen("output.txt", "w", stdout);
#endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  /*

  ?METHOD 1

  we will maintain two variables max_till_here, max.
  max_till_here will store the sum till that index
  max will store the maximum subarray sum which is the result we want
  we will traverse the whole array and store the sum of elements in max_till_here
  whenever the max_till_here > max , then we will update the value of
  max=max_till_here. If at any point of time max_till_here < 0.
  Then we will update the value of max_till_here = 0.

  ?METHOD 2


  Reference Ques:
  */

  // inputs
  int n;
  cin >> n;
  vector<int> nums(n);
  for (int i = 0; i < n; i++)
  {
    cin >> nums[i];
  }
  int res = maxSubArray(nums);
  cout << res;

  return 0;
}